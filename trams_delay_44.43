{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "disabled-pakistan",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2021-10-25T08:51:06.834160Z",
     "start_time": "2021-10-25T08:51:05.546014Z"
    }
   },
   "outputs": [],
   "source": [
    "#import bibliotek\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "np.random.seed(0)\n",
    "from sklearn.model_selection import cross_val_score\n",
    "import xgboost as xgb\n",
    "from datetime import datetime\n",
    "\n",
    "from sklearn.tree import DecisionTreeRegressor, DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\n",
    "from scikitplot.estimators import plot_learning_curve\n",
    "from sklearn.model_selection import train_test_split, StratifiedKFold\n",
    "from sklearn.model_selection import cross_val_score, StratifiedKFold, cross_val_predict\n",
    "import scikitplot as skplt\n",
    "from scikitplot.estimators import plot_learning_curve\n",
    "import eli5\n",
    "import seaborn as sns\n",
    "\n",
    "import xgboost as xgb\n",
    "import lightgbm as lgb\n",
    "import catboost as ctb\n",
    "    \n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "several-postage",
   "metadata": {},
   "outputs": [],
   "source": [
    "#wczytanie df_train i df_test\n",
    "df_train = pd.read_hdf('../input/tram.train.h5')\n",
    "df_test = pd.read_hdf('../input/tram.test.h5') #zbiór testowy bez odpowiedzi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "pregnant-jungle",
   "metadata": {},
   "outputs": [],
   "source": [
    "# rzeczywista różnica między czasem planowanym a czasem przyjazdu w sekundach\n",
    "df_train[\"real_delay\"] = (pd.to_datetime( df_train[\"datetime\"] ) - pd.to_datetime(df_train[\"planned_time\"]))\n",
    "df_train[\"real_delay\"] = df_train[\"real_delay\"] /pd.Timedelta(seconds=1)\n",
    "\n",
    "#modyfikacja zmiennej => przesunięcie=200 i log => rozkład ziennej zbliżony do normalnego\n",
    "df_train[\"log_real_delay+200\"] = np.log(df_train[\"real_delay\"] + 200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "instrumental-triangle",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#histogramy\n",
    "plt.figure(figsize=(20, 5))\n",
    "plt.subplot(131)\n",
    "df_train[\"delay\"].hist(bins=30)\n",
    "plt.title('delay')\n",
    "\n",
    "plt.subplot(132)\n",
    "df_train[\"real_delay\"].hist(bins=30)\n",
    "plt.title('real_delay')\n",
    "\n",
    "plt.subplot(133)\n",
    "np.log(df_train[\"real_delay\"] + 200).hist(bins=30)\n",
    "plt.title('log_real_delay + 200');\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "single-lodge",
   "metadata": {},
   "outputs": [],
   "source": [
    "# uzupełnienie braków w \"seq_num\"\n",
    "df_train[\"seq_num\"] = df_train[\"seq_num\"].fillna(-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "soviet-south",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>delay</th>\n",
       "      <th>datetime</th>\n",
       "      <th>stop</th>\n",
       "      <th>stop_name</th>\n",
       "      <th>number</th>\n",
       "      <th>direction</th>\n",
       "      <th>planned_time</th>\n",
       "      <th>vehicle_id</th>\n",
       "      <th>trip_id</th>\n",
       "      <th>seq_num</th>\n",
       "      <th>real_delay</th>\n",
       "      <th>log_real_delay+200</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>198055</th>\n",
       "      <td>198055</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-07-27 13:14:18</td>\n",
       "      <td>136</td>\n",
       "      <td>Bronowice Wiadukt</td>\n",
       "      <td>24</td>\n",
       "      <td>Bronowice Małe</td>\n",
       "      <td>2018-07-27 13:14:00</td>\n",
       "      <td>6.352185e+18</td>\n",
       "      <td>6351558574046752009</td>\n",
       "      <td>27.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>5.384495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13484</th>\n",
       "      <td>13484</td>\n",
       "      <td>120</td>\n",
       "      <td>2018-07-23 10:42:27</td>\n",
       "      <td>612</td>\n",
       "      <td>Borsucza</td>\n",
       "      <td>22</td>\n",
       "      <td>Walcownia</td>\n",
       "      <td>2018-07-23 10:40:00</td>\n",
       "      <td>6.352185e+18</td>\n",
       "      <td>6351558574044891398</td>\n",
       "      <td>7.0</td>\n",
       "      <td>147.0</td>\n",
       "      <td>5.849325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30626</th>\n",
       "      <td>30626</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-07-23 16:42:39</td>\n",
       "      <td>1263</td>\n",
       "      <td>Mały Płaszów</td>\n",
       "      <td>11</td>\n",
       "      <td>Czerwone Maki P+R</td>\n",
       "      <td>2018-07-23 16:43:00</td>\n",
       "      <td>6.352185e+18</td>\n",
       "      <td>6351558574044662032</td>\n",
       "      <td>1.0</td>\n",
       "      <td>-21.0</td>\n",
       "      <td>5.187386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35732</th>\n",
       "      <td>35732</td>\n",
       "      <td>60</td>\n",
       "      <td>2018-07-23 18:20:00</td>\n",
       "      <td>363</td>\n",
       "      <td>Hala Targowa</td>\n",
       "      <td>1</td>\n",
       "      <td>Salwator</td>\n",
       "      <td>2018-07-23 18:19:00</td>\n",
       "      <td>6.352185e+18</td>\n",
       "      <td>6351558574044354826</td>\n",
       "      <td>24.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>5.560682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18829</th>\n",
       "      <td>18829</td>\n",
       "      <td>120</td>\n",
       "      <td>2018-07-23 12:40:34</td>\n",
       "      <td>679</td>\n",
       "      <td>Ćwiklińskiej</td>\n",
       "      <td>9</td>\n",
       "      <td>Nowy Bieżanów P+R</td>\n",
       "      <td>2018-07-23 12:38:00</td>\n",
       "      <td>6.352185e+18</td>\n",
       "      <td>6351558574044625159</td>\n",
       "      <td>35.0</td>\n",
       "      <td>154.0</td>\n",
       "      <td>5.869297</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            id  delay             datetime  stop          stop_name  number  \\\n",
       "198055  198055      0  2018-07-27 13:14:18   136  Bronowice Wiadukt      24   \n",
       "13484    13484    120  2018-07-23 10:42:27   612           Borsucza      22   \n",
       "30626    30626      0  2018-07-23 16:42:39  1263       Mały Płaszów      11   \n",
       "35732    35732     60  2018-07-23 18:20:00   363       Hala Targowa       1   \n",
       "18829    18829    120  2018-07-23 12:40:34   679       Ćwiklińskiej       9   \n",
       "\n",
       "                direction         planned_time    vehicle_id  \\\n",
       "198055     Bronowice Małe  2018-07-27 13:14:00  6.352185e+18   \n",
       "13484           Walcownia  2018-07-23 10:40:00  6.352185e+18   \n",
       "30626   Czerwone Maki P+R  2018-07-23 16:43:00  6.352185e+18   \n",
       "35732            Salwator  2018-07-23 18:19:00  6.352185e+18   \n",
       "18829   Nowy Bieżanów P+R  2018-07-23 12:38:00  6.352185e+18   \n",
       "\n",
       "                    trip_id  seq_num  real_delay  log_real_delay+200  \n",
       "198055  6351558574046752009     27.0        18.0            5.384495  \n",
       "13484   6351558574044891398      7.0       147.0            5.849325  \n",
       "30626   6351558574044662032      1.0       -21.0            5.187386  \n",
       "35732   6351558574044354826     24.0        60.0            5.560682  \n",
       "18829   6351558574044625159     35.0       154.0            5.869297  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.concat([df_train, df_test])\n",
    "df.shape\n",
    "df_train.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "romantic-welding",
   "metadata": {},
   "outputs": [],
   "source": [
    "#features\n",
    "\n",
    "#zmianne średnia/mediana opóźnienia w zależności od seq_num\n",
    "dict_mean_del_by_seq = df_train.groupby('seq_num').agg(np.mean)['log_real_delay+200'].to_dict()\n",
    "dict_median_del_by_seq = df_train.groupby('seq_num').agg(np.median)['log_real_delay+200'].to_dict()\n",
    "df['mean_delay_on_seq'] =df.seq_num.map(dict_mean_del_by_seq)\n",
    "df['median_delay_on_seq'] =df.seq_num.map(dict_median_del_by_seq)\n",
    "\n",
    "#planowana godz. i minuta\n",
    "df['hour_and_min']= df['planned_time'].map(lambda x: \"{:d}:{:02d}\".format(datetime.fromisoformat(x).hour, datetime.fromisoformat(x).minute))\n",
    "\n",
    "#factorize\n",
    "df[\"seq_num\"]= df[\"seq_num\"].fillna(-1)\n",
    "df[\"stop_name\"] = df[\"stop_name\"].factorize()[0]\n",
    "df[\"direction\"] = df[\"direction\"].factorize()[0]\n",
    "df[\"vehicle_id\"] = df[\"vehicle_id\"].factorize()[0]\n",
    "df['hour_and_min'] = df['hour_and_min'].factorize()[0]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "other-military",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>delay</th>\n",
       "      <th>datetime</th>\n",
       "      <th>stop</th>\n",
       "      <th>stop_name</th>\n",
       "      <th>number</th>\n",
       "      <th>direction</th>\n",
       "      <th>planned_time</th>\n",
       "      <th>vehicle_id</th>\n",
       "      <th>trip_id</th>\n",
       "      <th>seq_num</th>\n",
       "      <th>real_delay</th>\n",
       "      <th>log_real_delay+200</th>\n",
       "      <th>mean_delay_on_seq</th>\n",
       "      <th>median_delay_on_seq</th>\n",
       "      <th>hour_and_min</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>47215</th>\n",
       "      <td>47215</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>681</td>\n",
       "      <td>69</td>\n",
       "      <td>13</td>\n",
       "      <td>7</td>\n",
       "      <td>2018-07-24 00:01:00</td>\n",
       "      <td>1</td>\n",
       "      <td>6351558574044715284</td>\n",
       "      <td>25.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.689907</td>\n",
       "      <td>5.673323</td>\n",
       "      <td>1163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47216</th>\n",
       "      <td>47216</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2582</td>\n",
       "      <td>90</td>\n",
       "      <td>13</td>\n",
       "      <td>7</td>\n",
       "      <td>2018-07-24 00:02:00</td>\n",
       "      <td>1</td>\n",
       "      <td>6351558574044715284</td>\n",
       "      <td>26.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.702604</td>\n",
       "      <td>5.686975</td>\n",
       "      <td>1190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47217</th>\n",
       "      <td>47217</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>112</td>\n",
       "      <td>11</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>2018-07-24 00:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>6351558574044641557</td>\n",
       "      <td>18.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.653268</td>\n",
       "      <td>5.631212</td>\n",
       "      <td>1082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47218</th>\n",
       "      <td>47218</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>679</td>\n",
       "      <td>112</td>\n",
       "      <td>13</td>\n",
       "      <td>7</td>\n",
       "      <td>2018-07-24 00:04:00</td>\n",
       "      <td>1</td>\n",
       "      <td>6351558574044715284</td>\n",
       "      <td>27.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.697250</td>\n",
       "      <td>5.690359</td>\n",
       "      <td>1083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47219</th>\n",
       "      <td>47219</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>407</td>\n",
       "      <td>13</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>2018-07-24 00:01:00</td>\n",
       "      <td>0</td>\n",
       "      <td>6351558574044641557</td>\n",
       "      <td>19.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.673441</td>\n",
       "      <td>5.648974</td>\n",
       "      <td>1163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308141</th>\n",
       "      <td>308141</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>89</td>\n",
       "      <td>21</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-07-31 23:55:00</td>\n",
       "      <td>1</td>\n",
       "      <td>6351558574044741905</td>\n",
       "      <td>33.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.615387</td>\n",
       "      <td>5.570249</td>\n",
       "      <td>1077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308142</th>\n",
       "      <td>308142</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2690</td>\n",
       "      <td>134</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>2018-07-31 23:57:00</td>\n",
       "      <td>1</td>\n",
       "      <td>6351558574044791061</td>\n",
       "      <td>24.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.696006</td>\n",
       "      <td>5.680173</td>\n",
       "      <td>1079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308143</th>\n",
       "      <td>308143</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>133</td>\n",
       "      <td>122</td>\n",
       "      <td>14</td>\n",
       "      <td>2</td>\n",
       "      <td>2018-07-31 23:56:00</td>\n",
       "      <td>1</td>\n",
       "      <td>6351558574044741905</td>\n",
       "      <td>34.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.653461</td>\n",
       "      <td>5.631212</td>\n",
       "      <td>1078</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308144</th>\n",
       "      <td>308144</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>630</td>\n",
       "      <td>51</td>\n",
       "      <td>24</td>\n",
       "      <td>12</td>\n",
       "      <td>2018-07-31 23:56:00</td>\n",
       "      <td>0</td>\n",
       "      <td>6351558574044950804</td>\n",
       "      <td>23.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.684341</td>\n",
       "      <td>5.673323</td>\n",
       "      <td>1078</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>308145</th>\n",
       "      <td>308145</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2691</td>\n",
       "      <td>129</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>2018-07-31 23:58:00</td>\n",
       "      <td>1</td>\n",
       "      <td>6351558574044791061</td>\n",
       "      <td>25.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.689907</td>\n",
       "      <td>5.673323</td>\n",
       "      <td>1080</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>132166 rows × 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            id  delay datetime  stop  stop_name  number  direction  \\\n",
       "47215    47215    NaN      NaN   681         69      13          7   \n",
       "47216    47216    NaN      NaN  2582         90      13          7   \n",
       "47217    47217    NaN      NaN   112         11      10         15   \n",
       "47218    47218    NaN      NaN   679        112      13          7   \n",
       "47219    47219    NaN      NaN   407         13      10         15   \n",
       "...        ...    ...      ...   ...        ...     ...        ...   \n",
       "308141  308141    NaN      NaN    89         21      14          2   \n",
       "308142  308142    NaN      NaN  2690        134      18          1   \n",
       "308143  308143    NaN      NaN   133        122      14          2   \n",
       "308144  308144    NaN      NaN   630         51      24         12   \n",
       "308145  308145    NaN      NaN  2691        129      18          1   \n",
       "\n",
       "               planned_time  vehicle_id              trip_id  seq_num  \\\n",
       "47215   2018-07-24 00:01:00           1  6351558574044715284     25.0   \n",
       "47216   2018-07-24 00:02:00           1  6351558574044715284     26.0   \n",
       "47217   2018-07-24 00:00:00           0  6351558574044641557     18.0   \n",
       "47218   2018-07-24 00:04:00           1  6351558574044715284     27.0   \n",
       "47219   2018-07-24 00:01:00           0  6351558574044641557     19.0   \n",
       "...                     ...         ...                  ...      ...   \n",
       "308141  2018-07-31 23:55:00           1  6351558574044741905     33.0   \n",
       "308142  2018-07-31 23:57:00           1  6351558574044791061     24.0   \n",
       "308143  2018-07-31 23:56:00           1  6351558574044741905     34.0   \n",
       "308144  2018-07-31 23:56:00           0  6351558574044950804     23.0   \n",
       "308145  2018-07-31 23:58:00           1  6351558574044791061     25.0   \n",
       "\n",
       "        real_delay  log_real_delay+200  mean_delay_on_seq  \\\n",
       "47215          NaN                 NaN           5.689907   \n",
       "47216          NaN                 NaN           5.702604   \n",
       "47217          NaN                 NaN           5.653268   \n",
       "47218          NaN                 NaN           5.697250   \n",
       "47219          NaN                 NaN           5.673441   \n",
       "...            ...                 ...                ...   \n",
       "308141         NaN                 NaN           5.615387   \n",
       "308142         NaN                 NaN           5.696006   \n",
       "308143         NaN                 NaN           5.653461   \n",
       "308144         NaN                 NaN           5.684341   \n",
       "308145         NaN                 NaN           5.689907   \n",
       "\n",
       "        median_delay_on_seq  hour_and_min  \n",
       "47215              5.673323          1163  \n",
       "47216              5.686975          1190  \n",
       "47217              5.631212          1082  \n",
       "47218              5.690359          1083  \n",
       "47219              5.648974          1163  \n",
       "...                     ...           ...  \n",
       "308141             5.570249          1077  \n",
       "308142             5.680173          1079  \n",
       "308143             5.631212          1078  \n",
       "308144             5.673323          1078  \n",
       "308145             5.673323          1080  \n",
       "\n",
       "[132166 rows x 16 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[ df[\"delay\"].isnull() ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "divine-mason",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['stop',\n",
       " 'stop_name',\n",
       " 'number',\n",
       " 'direction',\n",
       " 'vehicle_id',\n",
       " 'seq_num',\n",
       " 'mean_delay_on_seq',\n",
       " 'median_delay_on_seq',\n",
       " 'hour_and_min']"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# zmienne do modelu\n",
    "feats = df.columns\n",
    "black_list = [\"id\",\"datetime\",\"planned_time\", \"trip_id\",\"delay\",\"real_delay\",'log_real_delay+200']\n",
    "feats = [x for x in feats if x not in black_list]\n",
    "feats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "married-probability",
   "metadata": {},
   "outputs": [],
   "source": [
    "# train i test\n",
    "df_train = df[ df[\"delay\"].notnull() ].copy()\n",
    "df_test = df[ df[\"delay\"].isnull() ].copy()\n",
    "\n",
    "X_train = df_train[feats].values\n",
    "y_train = df_train[\"log_real_delay+200\"].values\n",
    "X_test = df_test[feats].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "moving-member",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-0.1694708873020296, 0.003984851030311529)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#model\n",
    "model = xgb.XGBRegressor(objective ='reg:squarederror', n_estimators=100, random_state=0)\n",
    "#model = xgb.XGBRegressor(max_depth=7, n_estimators=100, random_state=0)\n",
    "#model = ctb.CatBoostRegressor(n_estimators=100, depth=5, random_state=0, verbose=False)\n",
    "\n",
    "scores = cross_val_score(model, X_train, y_train, cv=5, scoring=\"neg_mean_absolute_error\")\n",
    "model.fit(X_train, y_train)\n",
    "np.mean(scores), np.std(scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "pressed-porcelain",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "    <style>\n",
       "    table.eli5-weights tr:hover {\n",
       "        filter: brightness(85%);\n",
       "    }\n",
       "</style>\n",
       "\n",
       "\n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "        <table class=\"eli5-weights eli5-feature-importances\" style=\"border-collapse: collapse; border: none; margin-top: 0em; table-layout: auto;\">\n",
       "    <thead>\n",
       "    <tr style=\"border: none;\">\n",
       "        <th style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">Weight</th>\n",
       "        <th style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">Feature</th>\n",
       "    </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "    \n",
       "        <tr style=\"background-color: hsl(120, 100.00%, 80.00%); border: none;\">\n",
       "            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n",
       "                0.2644\n",
       "                \n",
       "            </td>\n",
       "            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n",
       "                mean_delay_on_seq\n",
       "            </td>\n",
       "        </tr>\n",
       "    \n",
       "        <tr style=\"background-color: hsl(120, 100.00%, 86.94%); border: none;\">\n",
       "            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n",
       "                0.1439\n",
       "                \n",
       "            </td>\n",
       "            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n",
       "                number\n",
       "            </td>\n",
       "        </tr>\n",
       "    \n",
       "        <tr style=\"background-color: hsl(120, 100.00%, 87.52%); border: none;\">\n",
       "            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n",
       "                0.1349\n",
       "                \n",
       "            </td>\n",
       "            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n",
       "                seq_num\n",
       "            </td>\n",
       "        </tr>\n",
       "    \n",
       "        <tr style=\"background-color: hsl(120, 100.00%, 89.51%); border: none;\">\n",
       "            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n",
       "                0.1052\n",
       "                \n",
       "            </td>\n",
       "            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n",
       "                direction\n",
       "            </td>\n",
       "        </tr>\n",
       "    \n",
       "        <tr style=\"background-color: hsl(120, 100.00%, 90.12%); border: none;\">\n",
       "            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n",
       "                0.0965\n",
       "                \n",
       "            </td>\n",
       "            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n",
       "                vehicle_id\n",
       "            </td>\n",
       "        </tr>\n",
       "    \n",
       "        <tr style=\"background-color: hsl(120, 100.00%, 91.35%); border: none;\">\n",
       "            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n",
       "                0.0798\n",
       "                \n",
       "            </td>\n",
       "            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n",
       "                stop\n",
       "            </td>\n",
       "        </tr>\n",
       "    \n",
       "        <tr style=\"background-color: hsl(120, 100.00%, 92.38%); border: none;\">\n",
       "            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n",
       "                0.0666\n",
       "                \n",
       "            </td>\n",
       "            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n",
       "                stop_name\n",
       "            </td>\n",
       "        </tr>\n",
       "    \n",
       "        <tr style=\"background-color: hsl(120, 100.00%, 92.95%); border: none;\">\n",
       "            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n",
       "                0.0596\n",
       "                \n",
       "            </td>\n",
       "            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n",
       "                median_delay_on_seq\n",
       "            </td>\n",
       "        </tr>\n",
       "    \n",
       "        <tr style=\"background-color: hsl(120, 100.00%, 93.83%); border: none;\">\n",
       "            <td style=\"padding: 0 1em 0 0.5em; text-align: right; border: none;\">\n",
       "                0.0493\n",
       "                \n",
       "            </td>\n",
       "            <td style=\"padding: 0 0.5em 0 0.5em; text-align: left; border: none;\">\n",
       "                hour_and_min\n",
       "            </td>\n",
       "        </tr>\n",
       "    \n",
       "    \n",
       "    </tbody>\n",
       "</table>\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "    \n",
       "\n",
       "\n",
       "\n"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#ważność cech\n",
    "eli5.show_weights(model, feature_names=feats)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "superior-friendship",
   "metadata": {},
   "outputs": [],
   "source": [
    "#train, predict\n",
    "y_pred_log = model.predict(X_test)\n",
    "y_pred_log[ y_pred_log < 0 ] = 1e-6\n",
    "y_pred = np.exp( y_pred_log ) - 200\n",
    "y_pred = np.floor(y_pred/60) * 60\n",
    "y_pred[ y_pred < 0 ] = 0\n",
    "df_test[\"delay\"] = y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "advanced-rogers",
   "metadata": {},
   "outputs": [],
   "source": [
    "!mkdir -p ../output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "visible-federation",
   "metadata": {},
   "outputs": [],
   "source": [
    "#zapis\n",
    "df_test[ [\"id\", \"delay\"] ].to_csv('../output/JL_v18.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
